import java.util.Set;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedSourceVersion;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.annotation.processing.AbstractProcessor;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.Element;
import javax.lang.model.element.Name;
import javax.lang.model.element.ElementKind;
import java.io.PrintStream;
import java.io.FileOutputStream;

@SupportedSourceVersion(SourceVersion.RELEASE_8)
@SupportedAnnotationTypes({"Persistent", "Id", "Property"})
public class HibernateAnnotationProcessor extends AbstractProcessor {	
	public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
		PrintStream ps = null;
		try {
			// 遍历每个被@Persistent修饰的class文件
			for (Element t : roundEnv.getElementsAnnotatedWith(Persistent.class)) {
				// 获取正在处理的类名
				Name clazzName = t.getSimpleName();
				// 获取类定义前的@Persistent注解
				Persistent per = t.getAnnotation(Persistent.class);
				// 创建文件流输出流
				ps = new PrintStream(new FileOutputStream(clazzName + ".hbm.xml"));
				ps.println("<?xml version=\"1.0\"?>");
				ps.println("<!DOCTYPE hibernate-mapping PUBLIC");
				ps.println("	\"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"");
				ps.println("	\"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\"");
				ps.println("<hibernate-mapping>");
				ps.println("	<class name=\"" + t);
				// 输出per table的值
				ps.println("\" table=\"" + per.table() + "\">");
				// 获取类的成员元素
				for (Element f : t.getEnclosedElements()) {
					// 只处理成员变量上的Annotation
					if (f.getKind() == ElementKind.FIELD) {
						Id id = f.getAnnotation(Id.class);
						if (id != null) {
							ps.println("		<id name=\"" + f.getSimpleName()
								       	+ "\" column=\"" + id.column()
									+ "\" type=\"" + id.type()
									+ "\">");
							ps.println("		<generator class=\""
									+ id.generator() + "\"/>");
							ps.println("		</id>");
						}

						Property p = f.getAnnotation(Property.class);
						if (p != null) {
							ps.println("		<property name=\"" + f.getSimpleName()
									+ "\" column=" + p.column()
									+ "\" type=" + p.type()
									+ "\"/>");
						}
					}
				}
				ps.println("	</class>");
				ps.println("</hibernate-mapping>");
			}

		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			if (ps != null) {
				try {
					ps.close();
				} catch (Exception ex) {
					ex.printStackTrace();
				}
			}
		}
		return true;
	}	
}
